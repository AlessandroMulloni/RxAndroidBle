{
  "name": "RxAndroidBLE",
  "tagline": "",
  "body": "# RxAndroidBle [![Build Status](https://travis-ci.org/Polidea/RxAndroidBle.svg?branch=master)](https://travis-ci.org/Polidea/RxAndroidBle) [![Maven Central](https://img.shields.io/maven-central/v/com.polidea.rxandroidble/rxandroidble.svg)](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.polidea.rxandroidble%22%20AND%20a%3A%22rxandroidble%22)\r\n![Polidea](https://raw.githubusercontent.com/Polidea/RxAndroidBle/master/site/viking-large.jpeg \"Tailored software services including concept, design, development and testing\")\r\n## Introduction\r\n\r\nRxAndroidBle is a powerful painkiller for Android's Bluetooth Low Energy headaches. It is backed by RxJava, implementing complicated APIs as handy reactive observables. The library does for you:\r\n\r\n * Fancy asynchronous operations support (read, write, notifications)\r\n * Threading management in order to meet Android contracts\r\n * Connection and operation error handling\r\n\r\nFor support head to [StackOverflow #rxandroidble](http://stackoverflow.com/questions/tagged/rxandroidble?sort=active)\r\n\r\nRead the official announcement at [Polidea Blog](https://www.polidea.com/blog/RXAndroidBLE/).\r\n\r\n## RxAndroidBLE @ Mobile Central Europe 2016\r\n[![RxAndroidBLE @ Mobile Central Europe 2016](https://img.youtube.com/vi/0aKfUGCxUDM/0.jpg)](https://www.youtube.com/watch?v=0aKfUGCxUDM)\r\n\r\n## Usage\r\n### Obtaining the client\r\nIt's your job to maintain single instance of the client. You can use singleton, scoped [Dagger](http://google.github.io/dagger/) component or whatever else you want.\r\n\r\n```java\r\nRxBleClient rxBleClient = RxBleClient.create(context);\r\n```\r\n\r\n### Device discovery\r\nScanning devices in the area is simple as that:\r\n\r\n```java\r\nSubscription scanSubscription = rxBleClient.scanBleDevices()\r\n\t.subscribe(\r\n\t    rxBleScanResult -> {\r\n\t        // Process scan result here.\r\n\t    },\r\n\t    throwable -> {\r\n\t        // Handle an error here.\r\n\t    }\r\n\t);\r\n\r\n// When done, just unsubscribe.\r\nscanSubscription.unsubscribe();\r\n```\r\n\r\n### Connection\r\nFor further BLE interactions the connection is required.\r\n\r\n```java\r\nString macAddress = \"AA:BB:CC:DD:EE:FF\";\r\nRxBleDevice device = rxBleClient.getBleDevice(macAddress);\r\n\r\nSubscription subscription = device.establishConnection(context, false) // <-- autoConnect flag\r\n\t.subscribe(\r\n\t    rxBleConnection -> {\r\n\t\t    // All GATT operations are done through the rxBleConnection.\r\n\t    },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n\r\n// When done... unsubscribe and forget about connection teardown :)\r\nsubscription.unsubscribe();\r\n```\r\n\r\n#### Auto connect\r\nAfter https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context, boolean, android.bluetooth.BluetoothGattCallback):\r\nautoConnect\tboolean: Whether to directly connect to the remote device (false) or to automatically connect as soon as the remote device becomes available (true).\r\n\r\nAuto connect concept may be misleading at first glance. With the autoconnect flag set to false the connection will end up with an error if a BLE device is not advertising when the `RxBleDevice#establishConnection` method is called. From platform to platform timeout after which the error is emitted differs, but in general it is rather tens of seconds than single seconds.\r\n\r\nSetting the auto connect flag to true allows you to wait until the BLE device becomes discoverable. The `RxBleConnection` instance won't be emitted until the connection is fully set up. From experience it also handles acquiring wake locks, so it's safe to assume that your Android device will be woken up after the connection has been established - but it is not a documented feature and may change in the future system releases.\r\n\r\nBe careful not to overuse the autoConnect flag. On the other side it has negative impact on the connection initialization speed. Scanning window and interval is lowered as it is optimized for background use and depending on Bluetooth parameters it may (and usually do) take more time to establish the connection.\r\n\r\n### Read / write operations\r\n#### Read\r\n```java\r\ndevice.establishConnection(context, false)\r\n\t.flatMap(rxBleConnection -> rxBleConnection.readCharacteristic(characteristicUUID))\r\n\t.subscribe(\r\n\t    characteristicValue -> {\r\n\t\t    // Read characteristic value.\r\n\t    },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n\r\n```\r\n#### Write\r\n```java\r\ndevice.establishConnection(context, false)\r\n\t.flatMap(rxBleConnection -> rxBleConnection.writeCharacteristic(characteristicUUID, bytesToWrite))\r\n\t.subscribe(\r\n\t    characteristicValue -> {\r\n\t\t    // Characteristic value confirmed.\r\n\t    },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n```\r\n#### Multiple reads\r\n```java\r\n device.establishConnection(context, false)\r\n    .flatMap(rxBleConnection -> Observable.combineLatest(\r\n        rxBleConnection.readCharacteristic(firstUUID),\r\n        rxBleConnection.readCharacteristic(secondUUID),\r\n        YourModelCombiningTwoValues::new\r\n    ))\r\n\t.subscribe(\r\n\t    model -> {\r\n\t        // Process your model.\r\n\t    },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n```\r\n#### Read and write combined\r\n\r\n```java\r\n device.establishConnection(context, false)\r\n    .flatMap(rxBleConnection -> rxBleConnection.readCharacteristic(characteristicUuid)\r\n\t    .doOnNext(bytes -> {\r\n\t        // Process read data.\r\n\t    })\r\n\t    .flatMap(bytes -> rxBleConnection.writeCharacteristic(characteristicUuid, bytesToWrite)))\r\n\t.subscribe(\r\n\t    writeBytes -> {\r\n\t\t    // Written data.\r\n\t    },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n```\r\n### Change notifications\r\n```java\r\n device.establishConnection(context, false)\r\n    .flatMap(rxBleConnection -> rxBleConnection.setupNotification(characteristicUuid))\r\n    .doOnNext(notificationObservable -> {\r\n    \t// Notification has been set up\r\n    })\r\n    .flatMap(notificationObservable -> notificationObservable) // <-- Notification has been set up, now observe value changes.\r\n    .subscribe(\r\n        bytes -> {\r\n            // Given characteristic has been changes, here is the value.\r\n        },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n\r\n```\r\n### Observing connection state\r\nIf you want to observe changes in device connection state just subscribe like below. On subscription you will receive the most current state instantly.\r\n\r\n```java\r\ndevice.observeConnectionStateChanges()\r\n    .subscribe(\r\n        connectionState -> {\r\n            // Process your way.\r\n        },\r\n        throwable -> {\r\n            // Handle an error here.\r\n        }\r\n    );\r\n```\r\n### Logging\r\nFor connection debugging you can use extended logging\r\n\r\n```java\r\nRxBleClient.setLogLevel(RxBleLog.DEBUG);\r\n```\r\n\r\n### Error handling\r\nEvery error you may encounter is provided via onError callback. Each public method has JavaDoc explaining possible errors.\r\n\r\n\r\n## More examples\r\n\r\nComplete usage examples are located in `/sample` [GitHub repo](https://github.com/Polidea/RxAndroidBle/tree/master/sample/src/main/java/com/polidea/rxandroidble/sample).\r\n\r\n## Download\r\n### Gradle\r\n\r\n```java\r\ncompile \"com.polidea.rxandroidble:rxandroidble:1.1.0\"\r\n```\r\n### Maven\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.polidea.rxandroidble</groupId>\r\n  <artifactId>rxandroidble</artifactId>\r\n  <version>1.1.0</version>\r\n  <type>aar</type>\r\n</dependency>\r\n```\r\n\r\n## Unit testing\r\nUsing RxAndroidBle enables you to unit test your application easily. For examples how to use mocking head to [MockRxAndroidBle](https://github.com/Polidea/RxAndroidBle/tree/master/mockrxandroidble).\r\n## Contributing\r\nIf you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request.\r\n\r\nWhen submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ```./gradlew clean checkstyle test```.\r\n\r\n## Maintainers\r\n* Dariusz Seweryn (dariusz.seweryn@polidea.com)\r\n* Paweł Urban (pawel.urban@polidea.com)\r\n\r\n## Contributors, thank you!\r\n* Michał Zieliński (michal.zielinski@polidea.com)\r\n* Fracturedpsyche (https://github.com/fracturedpsyche)\r\n\r\n## License\r\n\r\n    Copyright 2016 Polidea Sp. z o.o\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n\r\n## Maintained by\r\n\r\n[![Polidea](https://raw.githubusercontent.com/Polidea/RxAndroidBle/master/site/polidea_logo.png \"Tailored software services including concept, design, development and testing\")](http://www.polidea.com)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}